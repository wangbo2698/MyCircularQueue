public class MyCircularQueue {

    public int[] elem;
    public int front;
    public int rear;//一定是 当前可以存放元素的下标


    public MyCircularQueue(int k) {
        this.elem = new int[k];
    }

    //入队
    public boolean enQueue(int value) {
        if(isFull()) {
            return false;
        }
        this.elem[this.rear]=value;
        this.rear = (this.rear+1)%this.elem.length;
        return true;
    }

    //
    public boolean deQueue() {
        if(isEmpty()) {
            return false;
        }
        this.front = (this.front+1)%this.elem.length;
        return true;
    }

    //得到队头元素 但是不删除
    public int Front() {
        if(isEmpty()) {
            return -1;
        }
        return this.elem[this.front];
    }
    //得到队尾元素
    public int Rear() {
        if(isEmpty()) {
            return -1;
        }
       /* if(this.rear == 0) {
            return this.elem[this.elem.length-1];
        }else {
            return this.elem[this.rear-1];
        }*/
        return this.rear == 0 ? this.elem[this.elem.length-1] :this.elem[this.rear-1] ;
    }

    public boolean isEmpty() {
        return this.front == this.rear;
    }

    public boolean isFull() {
        //rear的下一个是不是front
        if( (this.rear+1)%this.elem.length == this.front) {
            return true;
        }
        return false;
    }

}
